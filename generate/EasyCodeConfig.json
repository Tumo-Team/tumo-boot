{"author":"TyCoding","version":"1.2.4","userSecure":"","currTypeMapperGroupName":"Default","currTemplateGroupName":"tumo-boot","currColumnConfigGroupName":"Default","currGlobalConfigGroupName":"Default","typeMapper":{},"template":{"tumo-boot":{"name":"tumo-boot","elementList":[{"name":"controller.java.vm","code":"##引入自定义全局变量\n$!{tumo-boot-define.vm}\n\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{BasePackage}.common.core.api.R;\nimport $!{BasePackage}.common.core.api.QueryPage;\nimport $!{BasePackage}.common.log.annotation.ApiLog;\nimport $!{BasePackage}.common.mybatis.utils.MybatisUtil;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/tumo-boot/$!{TumoBootLowerCaseEntity}\")\n@Api(value = \"$!{tableInfo.comment}接口\", tags = \"$!{tableInfo.comment}接口\")\npublic class $!{tableName} {\n\n    private final $!{TumoBootService} $!{TumoBootLowerCaseService};\n\n    @GetMapping(\"/list\")\n    @ApiOperation(value = \"条件查询\")\n    public R<List<$!{TumoBootEntity}>> list($!{TumoBootEntity} $!{TumoBootLowerCaseEntity}) {\n        return R.ok($!{TumoBootLowerCaseService}.list());\n    }\n\n    @GetMapping(\"/page\")\n    @ApiOperation(value = \"分页、条件查询\")\n    public R list($!{TumoBootEntity} $!{TumoBootLowerCaseEntity}, QueryPage queryPage) {\n        Page<$!{TumoBootEntity}> page = new Page<>(queryPage.getPage(), queryPage.getLimit());\n        return R.ok(MybatisUtil.getData($!{TumoBootLowerCaseService}.page(page, Wrappers.<$!{TumoBootEntity}>query().lambda())));\n    }\n\n    @GetMapping(\"/{id}\")\n    @ApiOperation(value = \"根据ID查询\")\n    public R<$!{TumoBootEntity}> findById(@PathVariable $!pk.shortType id) {\n        return R.ok($!{TumoBootLowerCaseService}.getById(id));\n    }\n\n    @PostMapping\n    @ApiLog(\"新增$!{tableInfo.comment}\")\n    @ApiOperation(value = \"新增\")\n    public R add(@RequestBody $!{TumoBootEntity} $!{TumoBootLowerCaseEntity}) {\n        $!{TumoBootLowerCaseService}.save($!{TumoBootLowerCaseEntity});\n        return R.ok();\n    }\n\n    @PutMapping\n    @ApiLog(\"修改$!{tableInfo.comment}\")\n    @ApiOperation(value = \"修改\")\n    public R update(@RequestBody $!{TumoBootEntity} $!{TumoBootLowerCaseEntity}) {\n        $!{TumoBootLowerCaseService}.updateById($!{TumoBootLowerCaseEntity});\n        return R.ok();\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @ApiLog(\"删除$!{tableInfo.comment}\")\n    @ApiOperation(value = \"删除\")\n    public R delete(@PathVariable $!pk.shortType id) {\n        $!{TumoBootLowerCaseService}.removeById(id);\n        return R.ok();\n    }\n}\n"},{"name":"entity.java.vm","code":"##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!autoImport\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.util.Date;\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\n@Data\n@TableName(\"$tableInfo.obj.name\")\n@ApiModel(value = \"$!{tableInfo.comment}实体\")\npublic class $!{tableInfo.name} implements Serializable{\nprivate static final long serialVersionUID= $!tool.serial();\n\n#foreach($column in $tableInfo.pkColumn)\n/**\n * 主键\n */\n@ApiModelProperty(value = \"${column.comment}\")\n@TableId(type = IdType.ASSIGN_ID)\nprivate $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n#foreach($column in $tableInfo.otherColumn)\n\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n#if(${column.comment})\n@ApiModelProperty(value = \"${column.comment}\")\n#end\nprivate $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n}\n"},{"name":"mapper.java.vm","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Mapper\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Mapper\npublic interface $!{tableName} extends BaseMapper<$!{tableInfo.name}> {\n\n}\n"},{"name":"service.java.vm","code":"##引入自定义全局变量\n$!{tumo-boot-define.vm}\n\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\n##以下`cn.tycoding`开头的都是我自定义的类，请根据情况做相应修改\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport com.baomidou.mybatisplus.extension.service.IService;\n\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} extends IService<$!{TumoBootEntity}> {\n\n}\n"},{"name":"serviceImpl.java.vm","code":"##引入自定义全局变量\n$!{tumo-boot-define.vm}\n\n##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\n##以下`cn.tycoding`开头的都是我自定义的类，请根据情况做相应修改\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service\n@RequiredArgsConstructor\npublic class $!{tableName} extends ServiceImpl<$!{TumoBootMapper}, $!{TumoBootEntity}> implements $!{TumoBootService} {\n\n    private final $!{TumoBootMapper} $!{TumoBootLowerCaseMapper};\n\n}\n"},{"name":"mapper.xml.vm","code":"##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n</mapper>\n"}]},"tumo-boot-ui":{"name":"tumo-boot-ui","elementList":[{"name":"api.ts.vm","code":"##引入自定义全局变量\n$!{tumo-boot-define.vm}\n\n##设置回调\n$!callback.setFileName($tool.append(\"$!{TumoBootLowerCaseEntity}.ts\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/api/modules/\"))\n\nimport { defHttp } from '/@/utils/http/axios';\n\nconst Api = {\n  BaseApi: `/$!{TumoBootLowerCaseEntity}`,\n  $!{TumoBootEntity}ListApi: `/$!{TumoBootLowerCaseEntity}/list`,\n  $!{TumoBootEntity}PageApi: `/$!{TumoBootLowerCaseEntity}/page`,\n};\n\n/**\n * 分页、条件查询\n */\nexport function get$!{TumoBootEntity}List(params: any) {\n  return defHttp.get({\n    url: Api.$!{TumoBootEntity}ListApi,\n    params,\n  });\n}\n\n/**\n * 条件查询\n */\nexport function get$!{TumoBootEntity}Page(params: any) {\n  return defHttp.get({\n    url: Api.$!{TumoBootEntity}PageApi,\n    params,\n  });\n}\n\n/**\n * 根据ID查询\n */\nexport function get$!{TumoBootEntity}(id: string | number) {\n  return defHttp.get({\n    url: `${Api.BaseApi}/${id}`,\n  });\n}\n\n/**\n * 新增\n */\nexport function add$!{TumoBootEntity}(params: any) {\n  return defHttp.post({\n    url: Api.BaseApi,\n    params,\n  });\n}\n\n/**\n * 修改\n */\nexport function update$!{TumoBootEntity}(params: any) {\n  return defHttp.put({\n    url: Api.BaseApi,\n    params,\n  });\n}\n\n/**\n * 删除\n */\nexport function delete$!{TumoBootEntity}(id: string | number) {\n  return defHttp.delete({\n    url: `${Api.BaseApi}/${id}`,\n  });\n}\n"},{"name":"data.ts.vm","code":"##引入自定义全局变量\n$!{tumo-boot-define.vm}\n\n##设置回调\n$!callback.setFileName($tool.append(\"data.ts\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/\", $!{TumoBootLowerCaseEntity}))\n\nimport { BasicColumn } from '/@/components/Table';\nimport { FormSchema } from '/@/components/Table';\n\nexport const columns: BasicColumn[] = [\n#foreach($column in $tableInfo.fullColumn)\n  {\n    title: '${column.comment}',\n    dataIndex: '$!{column.name}',\n  },\n#end\n];\n\nexport const searchFormSchema: FormSchema[] = [\n#foreach($column in $tableInfo.pkColumn)\n  {\n    field: '$!{column.name}',\n    label: '${column.comment}',\n    component: 'Input',\n    colProps: { span: 8 },\n  },\n#end\n];\n\nexport const formSchema: FormSchema[] = [\n  #foreach($column in $tableInfo.pkColumn)\n    {\n      field: '$!{column.name}',\n      label: '${column.comment}',\n      component: 'Input',\n      show: false,\n    },\n  #end\n\n  #foreach($column in $tableInfo.otherColumn)\n    {\n      field: '$!{column.name}',\n      label: '${column.comment}',\n      required: true,\n      component: 'Input',\n    },\n  #end\n];\n"},{"name":"FormModal.vue.vm","code":"##引入自定义全局变量\n$!{tumo-boot-define.vm}\n\n##设置回调\n$!callback.setFileName($tool.append(\"FormModal.vue\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/\", $!{TumoBootLowerCaseEntity}))\n\n<template>\n  <BasicModal v-bind=\"$attrs\" @register=\"registerModal\" :title=\"getTitle\" @ok=\"handleSubmit\">\n    <BasicForm @register=\"registerForm\" />\n  </BasicModal>\n</template>\n<script lang=\"ts\">\n  import { defineComponent, ref, computed, unref } from 'vue';\n  import { BasicModal, useModalInner } from '/@/components/Modal';\n  import { BasicForm, useForm } from '/@/components/Form/index';\n  import { formSchema } from './data';\n\n  import { get$!{TumoBootEntity}, add$!{TumoBootEntity}, update$!{TumoBootEntity} } from '/@/api/modules/$!{TumoBootLowerCaseEntity}';\n  import { isNullOrUnDef } from '/@/utils/is';\n\n  export default defineComponent({\n    name: 'FormModal',\n    components: { BasicModal, BasicForm },\n    emits: ['success', 'register'],\n    setup(_, { emit }) {\n      const isUpdate = ref(true);\n\n      const [registerForm, { setFieldsValue, resetFields, validate }] = useForm({\n        labelWidth: 100,\n        schemas: formSchema,\n        showActionButtonGroup: false,\n      });\n\n      const [registerModal, { setModalProps, closeModal }] = useModalInner(async (data) => {\n        resetFields();\n        setModalProps({ confirmLoading: false });\n        isUpdate.value = !!data?.isUpdate;\n\n        if (unref(isUpdate)) {\n          const $!{TumoBootLowerCaseEntity} = await get$!{TumoBootEntity}(data.id);\n          setFieldsValue({\n            ...$!{TumoBootLowerCaseEntity},\n          });\n        }\n      });\n\n      const getTitle = computed(() => (!unref(isUpdate) ? '新增$!{tableInfo.comment}' : '编辑$!{tableInfo.comment}'));\n\n      async function handleSubmit() {\n        try {\n          const values = await validate();\n          setModalProps({ confirmLoading: true });\n          if (isNullOrUnDef(values.id)) {\n            // 新增\n            await add$!{TumoBootEntity}(values);\n          } else {\n            // 修改\n            await update$!{TumoBootEntity}(values);\n          }\n          closeModal();\n          emit('success');\n        } finally {\n          setModalProps({ confirmLoading: false });\n        }\n      }\n\n      return { registerModal, registerForm, getTitle, handleSubmit };\n    },\n  });\n</script>\n"},{"name":"index.vue.vm","code":"##引入自定义全局变量\n$!{tumo-boot-define.vm}\n\n##设置回调\n$!callback.setFileName($tool.append(\"index.vue\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/\", $!{TumoBootLowerCaseEntity}))\n\n<template>\n  <div>\n    <BasicTable @register=\"registerTable\">\n      <template #toolbar>\n        <a-button type=\"primary\" @click=\"handleCreate\">\n          新增$!{tableInfo.comment}\n        </a-button>\n      </template>\n      <template #action=\"{ record }\">\n        <TableAction\n            :actions=\"[\n            {\n              icon: 'clarity:note-edit-line',\n              onClick: handleEdit.bind(null, record.id),\n            },\n            {\n              icon: 'ant-design:delete-outlined',\n              color: 'error',\n              popConfirm: {\n                title: '是否确认删除',\n                confirm: handleDelete.bind(null, record.id),\n              },\n            },\n          ]\"\n        />\n      </template>\n    </BasicTable>\n    <FormModal @register=\"registerModal\" @success=\"handleSuccess\" />\n  </div>\n</template>\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n\n  import { BasicTable, useTable, TableAction } from '/@/components/Table';\n  import { get$!{TumoBootEntity}Page, delete$!{TumoBootEntity} } from '/@/api/modules/$!{TumoBootLowerCaseEntity}';\n\n  import { useModal } from '/@/components/Modal';\n  import FormModal from './FormModal.vue';\n\n  import { columns, searchFormSchema } from './data';\n\n  export default defineComponent({\n    name: 'Index',\n    components: { BasicTable, FormModal, TableAction },\n    setup() {\n      const [registerModal, { openModal }] = useModal();\n      const [registerTable, { reload }] = useTable({\n        title: '$!{tableInfo.comment}列表',\n        api: get$!{TumoBootEntity}Page,\n        columns,\n        formConfig: {\n          labelWidth: 120,\n          schemas: searchFormSchema,\n        },\n        striped: false,\n        useSearchForm: true,\n        showTableSetting: true,\n        bordered: true,\n        showIndexColumn: false,\n        tableSetting: { fullScreen: true },\n        actionColumn: {\n          width: 80,\n          title: '操作',\n          dataIndex: 'action',\n          slots: { customRender: 'action' },\n          fixed: undefined,\n        },\n      });\n\n      function handleCreate() {\n        openModal(true, {\n          isUpdate: false,\n        });\n      }\n\n      function handleEdit(id: string | number) {\n        openModal(true, {\n          id,\n          isUpdate: true,\n        });\n      }\n\n      async function handleDelete(id: string | number) {\n        await delete$!{TumoBootEntity}(id);\n        reload();\n      }\n\n      function handleSuccess() {\n        reload();\n      }\n\n      return {\n        registerTable,\n        registerModal,\n        handleCreate,\n        handleEdit,\n        handleDelete,\n        handleSuccess,\n      };\n    },\n  });\n</script>\n"}]}},"columnConfig":{},"globalConfig":{"Default":{"name":"Default","elementList":[{"name":"autoImport.vm","value":"##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"},{"name":"define.vm","value":"##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"},{"name":"init.vm","value":"##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"},{"name":"mybatisSupport.vm","value":"##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"},{"name":"tumo-boot-define.vm","value":"##自定义一些全局变量。引用方式，直接在code中用`$!define`方式引入即可\n\n##定义基础包名\n#set($BasePackage = \"cn.tycoding.boot\")\n\n##定义Entity名称\n#set($TumoBootEntity = $tableInfo.name)\n##定义首字母小写Entity名称\n#set($TumoBootLowerCaseEntity = $!tool.firstLowerCase($tableInfo.name))\n\n##定义Service名称\n#set($TumoBootService = $!{tableInfo.name} + \"Service\")\n##定义首字母小写Service名称\n#set($TumoBootLowerCaseService = $!tool.firstLowerCase($tableInfo.name) + \"Service\")\n\n##定义Mapper名称\n#set($TumoBootMapper = $!{tableInfo.name} + \"Mapper\")\n##定义首字母小写Mapper名称\n#set($TumoBootLowerCaseMapper = $!tool.firstLowerCase($tableInfo.name) + \"Mapper\")\n"}]}}}